name: 'Terraform'  # 定义工作流的名称为 'Terraform'

on:  # 定义触发工作流的 GitHub 事件
  push:  # 当有新的推送到 "main" 分支时触发
    branches: [ "main" ]
  pull_request:  # 当有新的 pull request 时触发

permissions:  # 定义工作流的权限
  contents: read  # 只读取仓库内容的权限

jobs:  # 定义工作流中的任务
  terraform:  # 定义一个名为 'Terraform' 的任务
    name: 'Terraform'  # 任务的名称为 'Terraform'
    runs-on: ubuntu-latest  # 任务在最新的 Ubuntu 环境中运行
    environment: production  # 设置任务的环境为 'production'

    env:
      ARM_CLIENT_ID: "277c15f2-8d4d-4ae8-b9b8-5af15b20def7"
      ARM_CLIENT_SECRET: ${{secrets.AZURESECRET}}
      ARM_SUBSCRIPTION_ID: "526f40bb-cd4c-422b-9acc-98ff37f9484b"
      ARM_TENANT_ID: "112c9ed4-6357-45bb-bbe9-018fdb35e8ee"


    
    # 无论 GitHub Actions 的运行环境是 ubuntu-latest，macos-latest，还是 windows-latest，都使用 Bash shell
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:  # 定义任务中的步骤
    # 将仓库的代码检出到 GitHub Actions 的运行器


    - name: Checkout
      uses: actions/checkout@v4

    # 安装最新版本的 Terraform CLI，并使用 Terraform Cloud 用户 API 令牌配置 Terraform CLI 配置文件
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.I9VaKUdUyERrew_atlasv1_Q65JvE2xuxUyTWyIsHWgi3GwAY1JWrZInf9P1ult8Vy2QEDTyOk3lrpZYqeOLJaMG3k }}

    # 初始化一个新的或现有的 Terraform 工作目录，创建初始文件，加载任何远程状态，下载模块等
    - name: Terraform Init
      run: ls && terraform init

    # 验证所有的 Terraform 配置文件是否有效
    - name: Terraform validate
      run: terraform validate

    # 为 Terraform 生成执行计划
    - name: Terraform Plan
      run: terraform plan -input=false && terraform apply -auto-approve -input=false

    # 在推送到 "main" 分支时，根据 Terraform 配置文件构建或更改基础设施
    # 注意：建议在你的仓库中为 "Terraform Cloud" 设置一个必需的 "严格" 状态检查。有关 "严格" 必需状态检查的更多信息，请查看文档：https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # 如果当前的引用是 "main" 分支，并且触发事件是推送操作  
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      # 则运行 'terraform apply' 命令，自动批准所有的更改，并且不接受输入
      run: terraform apply -auto-approve -input=false
